// This file is @generated by prost-build.
/// 定义消息类型
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Msg {
    /// / 传输类型
    #[prost(enumeration = "TransportType", tag = "1")]
    pub transport: i32,
    /// / 总线类型
    #[prost(enumeration = "BusType", tag = "2")]
    pub bus: i32,
    /// / 操作类型
    #[prost(enumeration = "Operation", tag = "3")]
    pub operation: i32,
    /// / 地址
    #[prost(uint32, tag = "4")]
    pub address: u32,
    /// / 数据
    #[prost(bytes = "vec", optional, tag = "5")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// / 延时
    #[prost(uint64, optional, tag = "6")]
    pub delay_us: ::core::option::Option<u64>,
}
/// 定义枚举类型
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransportType {
    Cdc = 0,
    WebSocket = 1,
}
impl TransportType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Cdc => "Cdc",
            Self::WebSocket => "WebSocket",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Cdc" => Some(Self::Cdc),
            "WebSocket" => Some(Self::WebSocket),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BusType {
    I2c = 0,
    Spi = 1,
}
impl BusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::I2c => "I2C",
            Self::Spi => "SPI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "I2C" => Some(Self::I2c),
            "SPI" => Some(Self::Spi),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Operation {
    Ack = 0,
    Read = 1,
    Write = 2,
    Transfer = 3,
}
impl Operation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ack => "Ack",
            Self::Read => "Read",
            Self::Write => "Write",
            Self::Transfer => "Transfer",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Ack" => Some(Self::Ack),
            "Read" => Some(Self::Read),
            "Write" => Some(Self::Write),
            "Transfer" => Some(Self::Transfer),
            _ => None,
        }
    }
}
